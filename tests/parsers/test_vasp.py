import unittest
from dfttopif.parsers import VaspParser
from ..test_pif import unpack_example, delete_example
from pypif.obj.common.value import Value
import os
import shutil

class TestVASPParser(unittest.TestCase):
        
    def get_parser(self,name):
        '''Get a VaspParser for a certain test'''
        unpack_example(os.path.join('examples','vasp',name+'.tar.gz'))
        return VaspParser(name)

    def test_perov(self):
        # Parse the results
        parser = self.get_parser('perov_relax_U')
        
        # Test the settings
        self.assertEquals('VASP', parser.get_name())
        strc = parser.get_output_structure()
        self.assertAlmostEquals(3.9088966983609255, strc.cell[1][1])
        self.assertEquals(['La','Mn','O','O','O'], strc.get_chemical_symbols())
        self.assertEquals('LaMnO3', parser.get_composition())
        
        res = parser.get_cutoff_energy()
        self.assertEquals(400, res.scalars[0].value)
        self.assertEquals('eV', res.units)
        
        self.assertTrue(parser.is_converged().scalars[0].value)
        
        self.assertAlmostEqual(-39.85550532, parser.get_total_energy().scalars[0].value)
        
        self.assertEquals(None, parser.uses_SOC())        
        
        self.assertTrue(isinstance(parser.is_relaxed(), Value))
        self.assertEquals('PAW_PBE', parser.get_xc_functional().scalars[0].value)
        self.assertEquals(['La','Mn','O'], list(map(lambda x: x.value, parser.get_pp_name().scalars)))
        self.assertEquals(8640, parser.get_KPPRA().scalars[0].value)
        self.assertEquals('5.3.2', parser.get_version_number())
        self.assertEquals({'Type': 2,
                           'Values':{'La':{'L':-1,'U':0.0,'J':0.0},'Mn':{'L':2,'U':3.8,'J':0.0},'O':{'L':-1,'U':0.0,'J':0.0}}},
                          parser.get_U_settings().as_dictionary())
        self.assertEquals(None, parser.get_vdW_settings())
        self.assertEquals(0.09, parser.get_pressure().scalars[0].value)
        self.assertEquals([[0.08970,0,0],[0,0.08970,0],[0,0,0.08970]],
                          list(map(lambda x: list(map(lambda y: y.value, x)), parser.get_stresses().matrices[0])))
        self.assertEquals(0, parser.get_band_gap().scalars[0].value)

        dos = parser.get_dos()
        self.assertEquals([-26.378, -26.241, -26.103000000000002, -25.966000000000001, -25.829000000000001, -25.690999999999999, -25.553999999999998, -25.417000000000002, -25.279, -25.141999999999999, -25.004999999999999, -24.867000000000001, -24.73, -24.593, -24.454999999999998, -24.318000000000001, -24.181000000000001, -24.042999999999999, -23.905999999999999, -23.768999999999998, -23.631, -23.494, -23.356999999999999, -23.219000000000001, -23.082000000000001, -22.945, -22.806999999999999, -22.670000000000002, -22.533000000000001, -22.395, -22.257999999999999, -22.120999999999999, -21.983000000000001, -21.846, -21.709, -21.571000000000002, -21.434000000000001, -21.297000000000001, -21.158999999999999, -21.021999999999998, -20.884, -20.747, -20.609999999999999, -20.472000000000001, -20.335000000000001, -20.198, -20.059999999999999, -19.922999999999998, -19.786000000000001, -19.648, -19.510999999999999, -19.373999999999999, -19.236000000000001, -19.099, -18.962, -18.824000000000002, -18.687000000000001, -18.550000000000001, -18.411999999999999, -18.274999999999999, -18.138000000000002, -18.0, -17.863, -17.725999999999999, -17.588000000000001, -17.451000000000001, -17.314, -17.175999999999998, -17.039000000000001, -16.902000000000001, -16.763999999999999, -16.626999999999999, -16.489999999999998, -16.352, -16.215, -16.077999999999999, -15.94, -15.803000000000001, -15.666, -15.528, -15.391, -15.254, -15.116, -14.978999999999999, -14.842000000000001, -14.704000000000001, -14.567, -14.43, -14.292, -14.154999999999999, -14.018000000000001, -13.880000000000001, -13.743, -13.606, -13.468, -13.331, -13.194000000000001, -13.055999999999999, -12.919, -12.782, -12.644, -12.507, -12.369999999999999, -12.231999999999999, -12.095000000000001, -11.958, -11.82, -11.683, -11.545999999999999, -11.407999999999999, -11.271000000000001, -11.134, -10.996, -10.859, -10.722, -10.584, -10.446999999999999, -10.31, -10.172000000000001, -10.035, -9.8979999999999997, -9.7599999999999998, -9.6229999999999993, -9.4860000000000007, -9.3480000000000008, -9.2110000000000003, -9.0739999999999998, -8.9359999999999999, -8.7989999999999995, -8.6620000000000008, -8.5239999999999991, -8.3870000000000005, -8.25, -8.1120000000000001, -7.9749999999999996, -7.8380000000000001, -7.7000000000000002, -7.5629999999999997, -7.4260000000000002, -7.2880000000000003, -7.1509999999999998, -7.0140000000000002, -6.8760000000000003, -6.7389999999999999, -6.6020000000000003, -6.4640000000000004, -6.327, -6.1890000000000001, -6.0519999999999996, -5.915, -5.7770000000000001, -5.6399999999999997, -5.5030000000000001, -5.3650000000000002, -5.2279999999999998, -5.0910000000000002, -4.9530000000000003, -4.8159999999999998, -4.6790000000000003, -4.5410000000000004, -4.4039999999999999, -4.2670000000000003, -4.1289999999999996, -3.992, -3.855, -3.7170000000000001, -3.5800000000000001, -3.4430000000000001, -3.3050000000000002, -3.1680000000000001, -3.0310000000000001, -2.8929999999999998, -2.7559999999999998, -2.6190000000000002, -2.4809999999999999, -2.3439999999999999, -2.2069999999999999, -2.069, -1.9319999999999999, -1.7949999999999999, -1.657, -1.52, -1.383, -1.2450000000000001, -1.1080000000000001, -0.97099999999999997, -0.83299999999999996, -0.69599999999999995, -0.55900000000000005, -0.42099999999999999, -0.28399999999999997, -0.14699999999999999, -0.0089999999999999993, 0.128, 0.26500000000000001, 0.40300000000000002, 0.54000000000000004, 0.67700000000000005, 0.81499999999999995, 0.95199999999999996, 1.089, 1.2270000000000001, 1.3640000000000001, 1.5009999999999999, 1.639, 1.776, 1.913, 2.0510000000000002, 2.1880000000000002, 2.3250000000000002, 2.4630000000000001, 2.6000000000000001, 2.7370000000000001, 2.875, 3.012, 3.149, 3.2869999999999999, 3.4239999999999999, 3.5609999999999999, 3.6989999999999998, 3.8359999999999999, 3.9729999999999999, 4.1109999999999998, 4.2480000000000002, 4.3849999999999998, 4.5229999999999997, 4.6600000000000001, 4.7969999999999997, 4.9349999999999996, 5.0720000000000001, 5.2089999999999996, 5.3470000000000004, 5.484, 5.6210000000000004, 5.7590000000000003, 5.8959999999999999, 6.0330000000000004, 6.1710000000000003, 6.3079999999999998, 6.4450000000000003, 6.5830000000000002, 6.7199999999999998, 6.8570000000000002, 6.9950000000000001, 7.1319999999999997, 7.2690000000000001, 7.407, 7.5439999999999996, 7.681, 7.819, 7.9560000000000004, 8.093, 8.2309999999999999, 8.3680000000000003, 8.5060000000000002, 8.6430000000000007, 8.7799999999999994, 8.9179999999999993, 9.0549999999999997, 9.1920000000000002, 9.3300000000000001, 9.4670000000000005, 9.6039999999999992, 9.7420000000000009, 9.8789999999999996, 10.016, 10.154, 10.291, 10.428000000000001, 10.566000000000001, 10.702999999999999, 10.84, 10.978, 11.115, 11.252000000000001, 11.390000000000001, 11.526999999999999, 11.664, 11.802, 11.939, 12.076000000000001, 12.214, 12.351000000000001, 12.488, 12.625999999999999, 12.763, 12.9, 13.038, 13.175000000000001, 13.311999999999999, 13.449999999999999, 13.587, 13.724, 13.862, 13.999000000000001, 14.135999999999999, 14.273999999999999, 14.411, 14.548, 14.686, 14.823],
                          list(map(lambda x: x.value, dos.conditions.scalars)))
        self.assertEquals([0.0, 0.0, -1.19974e-35, -3.6470000000000002e-30, -1.3654e-25, -2.0122999999999998e-21, -1.1612e-17, -2.5870000000000001e-14, -2.3158e-11, -8.1289999999999995e-09, -1.1086000000000001e-06, -5.7370000000000001e-05, -0.0010558, -0.0053100000000000005, 0.0099659999999999992, 0.09085, 0.12007000000000001, 0.035970000000000002, -0.0050520000000000001, -0.002444, -0.00020777999999999999, -5.8720000000000007e-06, -6.1280000000000003e-08, -2.4453999999999996e-10, -3.7849999999999995e-13, -2.3017e-16, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0769999999999999e-36, -1.263846e-31, -4.5653699999999997e-27, -6.5055699999999999e-23, -3.6695199999999999e-19, -7.9435000000000008e-16, -7.0263000000000001e-13, -2.4759000000000002e-10, -3.4771000000000001e-08, -1.9404999999999999e-06, -4.2440999999999996e-05, -0.00034220000000000002, -0.00067650000000000002, 0.0028322, 0.017154000000000003, 0.04342, 0.058620000000000005, 0.043749999999999997, 0.025759999999999998, 0.018255, 0.020630000000000003, 0.040410000000000001, 0.070239999999999997, 0.089269999999999988, 0.10810999999999998, 0.11366000000000001, 0.066860000000000003, 0.014122000000000001, -0.0024438999999999997, -0.0013060000000000001, -0.00014683900000000001, -5.8520999999999994e-06, -2.7914999999999999e-06, -5.1669999999999998e-05, -0.00035110000000000002, -0.00036900000000000002, 0.003519, 0.012931, 0.030180000000000002, 0.080740000000000006, 0.14502999999999999, 0.14307999999999998, 0.11418, 0.10038, 0.07102, 0.02673, 0.0029481000000000004, -0.0012769000000000001, -0.00048329999999999998, -5.4889999999999998e-05, -2.3511000000000002e-06, -3.941e-08, -2.6148000000000001e-10, -6.892999999999999e-13, -7.2260000000000005e-16, -1.4030000000000001e-19, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.361e-35, -1.513e-30, -3.6580000027900005e-26, -3.4550000174800002e-22, -1.24900004155e-18, -1.8020003855000002e-15, -1.0360013670000001e-12, -2.38501934e-10, -2.2271089e-08, -8.632447e-07, -1.4562029999999999e-05, -0.00011538919999999999, -0.00040824000000000004, 0.00026865999999999999, 0.0074427299999999998, 0.024236000000000001, 0.037592, 0.039448999999999998, 0.040390000000000002, 0.047368, 0.045290000000000004, 0.043109999999999996, 0.065069999999999989, 0.084000000000000005, 0.08388000000000001, 0.078009999999999996, 0.066009999999999999, 0.051519999999999996, 0.046550000000000001, 0.055629999999999999, 0.074740000000000001, 0.097983000000000001, 0.086382, 0.063489999999999991, 0.072400000000000006, 0.058990000000000001, 0.038935999999999998, 0.030331999999999998, 0.029690000000000001, 0.037170000000000002, 0.04317, 0.044810000000000003, 0.057980000000000004, 0.075889999999999999, 0.087109999999999993, 0.089520000000000002, 0.088499999999999995, 0.090439999999999993, 0.096759999999999999, 0.1026, 0.10458999999999999, 0.10609, 0.092800000000000007, 0.056925999999999997, 0.017107000000000001, 0.0022797, 0.0054678000000000001, 0.0087969099999999998, 0.0086576974000000008, 0.0093789968080000008, 0.0110199999868, 0.01219999999997858, 0.0067749999999999868, 0.0029060000000000002, 0.0047070000000000002, 0.0056299999999999996, 0.0087919999999999995, 0.01132, 0.0086099999999999996, 0.0044559999999999999, 0.0055139999999994412, 0.0090759999996227001, 0.0097889998984000016, 0.01070998865, 0.0092994370999999985, 0.0061547299999999997, 0.0065844000000000007, 0.0091786999999999997, 0.006215, 0.0083759999999999998, 0.068430000000000005, 0.21668999999999999, 0.37070000000000003, 0.47799999999999998, 0.36899999999999999, 0.13123000000000001, 0.018269000000000001, 0.011729999999999999, 0.022500600000000003, 0.02993055, 0.034198961999999999, 0.042799988399999996, 0.061819999945499998, 0.079549999999893997, 0.070929999999999924, 0.039800000000000002, 0.016230000000000001, 0.01172, 0.01259, 0.0074139999999999996, 0.00513, 0.003588, 0.00072320000000000001, -0.0001964, -6.6060000000000001e-05, -5.1070000000000004e-06, -1.346e-07, -1.308e-09, -4.815e-12, -6.7919999999999999e-15, -3.743e-18, 0.0, 0.0, 0.0, 0.0, 0.0],
                          list(map(lambda x: x.value, dos.scalars)))
   
        # Delete the data
        delete_example('perov_relax_U')
        
    def test_AlNi(self):
        parser = self.get_parser('AlNi_static_LDA')
        self._evaluate_AlNi(parser)
        delete_example('AlNi_static_LDA')

    def test_AlNi_without_incar(self):
        """Make sure AlNi test also works without an INCAR an INCAR still parses"""
        parser = self.get_parser('AlNi_static_LDA')
        os.unlink(os.path.join('AlNi_static_LDA','INCAR'))
        self._evaluate_AlNi(parser)
        delete_example('AlNi_static_LDA')

    def _evaluate_AlNi(self, parser):
        """Test that AlNi was parsed correctly"""
        
        # Test the settings
        self.assertEquals('VASP', parser.get_name())
        strc = parser.get_output_structure()
        self.assertAlmostEquals(2.8333249999999999, strc.cell[0][0])
        self.assertEquals(['Al','Ni'], strc.get_chemical_symbols())
        self.assertEquals('AlNi', parser.get_composition())
        
        res = parser.get_cutoff_energy()
        self.assertEquals(650, res.scalars[0].value)
        self.assertEquals('eV', res.units)

        self.assertTrue(parser.is_converged().scalars[0].value)

        res = parser.get_total_energy()
        self.assertAlmostEqual(-12.19669689, res.scalars[0].value)
        self.assertEquals('eV', res.units)
        self.assertEquals(None, parser.uses_SOC())
        self.assertEquals(None, parser.is_relaxed())
        self.assertEquals('PAW', parser.get_xc_functional().scalars[0].value)
        self.assertEquals(['Al','Ni'], list(map(lambda x: x.value, parser.get_pp_name().scalars)))
        self.assertEquals(8192, parser.get_KPPRA().scalars[0].value)
        self.assertEquals('5.3.2', parser.get_version_number())
        self.assertEquals(None, parser.get_U_settings())
        self.assertEquals(None, parser.get_vdW_settings())
        self.assertEquals(12.96, parser.get_pressure().scalars[0].value)
        self.assertEquals('kbar', parser.get_pressure().units)
        self.assertEquals([[12.96023,0,0],[0,12.96023,0],[0,0,12.96023]],
                          list(map(lambda x: list(map(lambda y: y.value, x)), parser.get_stresses().matrices[0])))
        self.assertEquals('kbar', parser.get_stresses().units)
        self.assertEquals(0, parser.get_band_gap().scalars[0].value)
        self.assertEquals('eV', parser.get_band_gap().units)

        dos = parser.get_dos()
        self.assertEquals([-3.0259999999999998, -2.903, -2.7810000000000001, -2.6579999999999999, -2.5350000000000001, -2.4119999999999999, -2.2890000000000001, -2.1659999999999999, -2.044, -1.921, -1.798, -1.675, -1.552, -1.4299999999999999, -1.3069999999999999, -1.1839999999999999, -1.0609999999999999, -0.93799999999999994, -0.81599999999999995, -0.69299999999999995, -0.56999999999999995, -0.44700000000000001, -0.32400000000000001, -0.20200000000000001, -0.079000000000000001, 0.043999999999999997, 0.16700000000000001, 0.28999999999999998, 0.41199999999999998, 0.53500000000000003, 0.65800000000000003, 0.78100000000000003, 0.90400000000000003, 1.026, 1.149, 1.272, 1.395, 1.518, 1.6399999999999999, 1.7629999999999999, 1.8859999999999999, 2.0089999999999999, 2.1320000000000001, 2.2549999999999999, 2.3769999999999998, 2.5, 2.6230000000000002, 2.746, 2.8690000000000002, 2.9910000000000001, 3.1139999999999999, 3.2370000000000001, 3.3599999999999999, 3.4830000000000001, 3.605, 3.7280000000000002, 3.851, 3.9740000000000002, 4.0970000000000004, 4.2190000000000003, 4.3419999999999996, 4.4649999999999999, 4.5880000000000001, 4.7110000000000003, 4.8330000000000002, 4.9560000000000004, 5.0789999999999997, 5.202, 5.3250000000000002, 5.4470000000000001, 5.5700000000000003, 5.6929999999999996, 5.8159999999999998, 5.9390000000000001, 6.0620000000000003, 6.1840000000000002, 6.3070000000000004, 6.4299999999999997, 6.5529999999999999, 6.6760000000000002, 6.798, 6.9210000000000003, 7.0439999999999996, 7.1669999999999998, 7.29, 7.4119999999999999, 7.5350000000000001, 7.6580000000000004, 7.7809999999999997, 7.9039999999999999, 8.0259999999999998, 8.1489999999999991, 8.2720000000000002, 8.3949999999999996, 8.5180000000000007, 8.6400000000000006, 8.7629999999999999, 8.8859999999999992, 9.0090000000000003, 9.1319999999999997, 9.2539999999999996, 9.3770000000000007, 9.5, 9.6229999999999993, 9.7460000000000004, 9.8689999999999998, 9.9909999999999997, 10.114000000000001, 10.237, 10.359999999999999, 10.483000000000001, 10.605, 10.728, 10.851000000000001, 10.974, 11.097, 11.218999999999999, 11.342000000000001, 11.465, 11.587999999999999, 11.711, 11.833, 11.956, 12.079000000000001, 12.202, 12.324999999999999, 12.446999999999999, 12.57, 12.693, 12.816000000000001, 12.939, 13.061, 13.183999999999999, 13.307, 13.43, 13.553000000000001, 13.675000000000001, 13.798, 13.920999999999999, 14.044, 14.167, 14.289999999999999, 14.412000000000001, 14.535, 14.657999999999999, 14.781000000000001, 14.904, 15.026, 15.148999999999999, 15.272, 15.395, 15.518000000000001, 15.640000000000001, 15.763, 15.885999999999999, 16.009, 16.132000000000001, 16.254000000000001, 16.376999999999999, 16.5, 16.623000000000001, 16.745999999999999, 16.867999999999999, 16.991, 17.114000000000001, 17.236999999999998, 17.359999999999999, 17.481999999999999, 17.605, 17.728000000000002, 17.850999999999999, 17.974, 18.097000000000001, 18.219000000000001, 18.341999999999999, 18.465, 18.588000000000001, 18.710999999999999, 18.832999999999998, 18.956, 19.079000000000001, 19.202000000000002, 19.324999999999999, 19.446999999999999, 19.57, 19.693000000000001, 19.815999999999999, 19.939, 20.061, 20.184000000000001, 20.306999999999999, 20.43, 20.553000000000001, 20.675000000000001, 20.797999999999998, 20.920999999999999, 21.044, 21.167000000000002, 21.289000000000001, 21.411999999999999, 21.535, 21.658000000000001, 21.780999999999999, 21.902999999999999, 22.026, 22.149000000000001, 22.271999999999998, 22.395, 22.518000000000001, 22.640000000000001, 22.763000000000002, 22.885999999999999, 23.009, 23.132000000000001, 23.254000000000001, 23.376999999999999, 23.5, 23.623000000000001, 23.745999999999999, 23.867999999999999, 23.991, 24.114000000000001, 24.236999999999998, 24.359999999999999, 24.481999999999999, 24.605, 24.728000000000002, 24.850999999999999, 24.974, 25.096, 25.219000000000001, 25.341999999999999, 25.465, 25.588000000000001, 25.710000000000001, 25.832999999999998, 25.956, 26.079000000000001, 26.202000000000002, 26.324999999999999, 26.446999999999999, 26.57, 26.693000000000001, 26.815999999999999, 26.939, 27.061, 27.184000000000001, 27.306999999999999, 27.43, 27.553000000000001, 27.675000000000001, 27.797999999999998, 27.920999999999999, 28.044, 28.167000000000002, 28.289000000000001, 28.411999999999999, 28.535, 28.658000000000001, 28.780999999999999, 28.902999999999999, 29.026, 29.149000000000001, 29.271999999999998, 29.395, 29.516999999999999, 29.640000000000001, 29.763000000000002, 29.885999999999999, 30.009, 30.131, 30.254000000000001, 30.376999999999999, 30.5, 30.623000000000001, 30.745999999999999, 30.867999999999999, 30.991, 31.114000000000001, 31.236999999999998, 31.359999999999999, 31.481999999999999, 31.605, 31.728000000000002, 31.850999999999999, 31.974, 32.095999999999997, 32.219000000000001, 32.341999999999999, 32.465000000000003, 32.588000000000001, 32.710000000000001, 32.832999999999998, 32.956000000000003, 33.079000000000001, 33.201999999999998, 33.323999999999998, 33.447000000000003, 33.57, 33.692999999999998, 33.816000000000003],
                          list(map(lambda x: x.value, dos.conditions.scalars)))
        self.assertEquals('eV', dos.conditions.units)
        self.assertEquals([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.034779999999999998, 0.058860000000000003, 0.087639999999999996, 0.097239999999999993, 0.11268, 0.12908, 0.13766, 0.14779999999999999, 0.15936, 0.17232, 0.17985999999999999, 0.18837999999999999, 0.19753999999999999, 0.20760000000000001, 0.21779999999999999, 0.22600000000000001, 0.23419999999999999, 0.2422, 0.25080000000000002, 0.26000000000000001, 0.27000000000000002, 0.27900000000000003, 0.28699999999999998, 0.29499999999999998, 0.3044, 0.31419999999999998, 0.32419999999999999, 0.33460000000000001, 0.3448, 0.35659999999999997, 0.36940000000000001, 0.38340000000000002, 0.39860000000000001, 0.41520000000000001, 0.43580000000000002, 0.45839999999999997, 0.46700000000000003, 0.47920000000000001, 0.49320000000000003, 0.50960000000000005, 0.53200000000000003, 0.5534, 0.56879999999999997, 0.6048, 0.63600000000000001, 0.65880000000000005, 0.71020000000000005, 0.75839999999999996, 0.65300000000000002, 0.623, 0.61660000000000004, 0.62480000000000002, 0.63859999999999995, 0.66200000000000003, 0.7016, 0.76400000000000001, 0.82920000000000005, 0.96719999999999995, 1.7285999999999999, 2.1680000000000001, 1.8826000000000001, 1.599, 1.4379999999999999, 1.5680000000000001, 2.4300000000000002, 2.4079999999999999, 3.5880000000000001, 2.9319999999999999, 2.742, 1.9369000000000001, 0.71629999999999994, 3.5699999999999998, 4.3099999999999996, 3.242, 4.4660000000000002, 8.8300000000000001, 5.7919999999999998, 5.1760000000000002, 4.0540000000000003, 2.8900000000000001, 0.88260000000000005, 0.7258, 0.62339999999999995, 0.52700000000000002, 0.35659999999999997, 0.4929, 0.65859999999999996, 2.6619999999999999, 1.5973999999999999, 1.3284, 1.1026, 0.9264, 0.83499999999999996, 0.7722, 0.7046, 0.6482, 0.60140000000000005, 0.5484, 0.51039999999999996, 0.47660000000000002, 0.44700000000000001, 0.41199999999999998, 0.38600000000000001, 0.35539999999999999, 0.2994, 0.26019999999999999, 0.26479999999999998, 0.309, 0.35599999999999998, 0.3886, 0.44440000000000002, 0.5766, 0.6976, 0.73719999999999997, 0.80220000000000002, 0.8226, 0.89459999999999995, 0.86519999999999997, 0.82620000000000005, 0.78720000000000001, 0.77880000000000005, 0.83579999999999999, 0.74099999999999999, 0.73340000000000005, 0.7944, 0.73919999999999997, 0.73199999999999998, 0.74119999999999997, 0.69840000000000002, 0.73860000000000003, 0.71079999999999999, 0.70199999999999996, 0.77439999999999998, 0.74460000000000004, 0.79279999999999995, 0.89900000000000002, 0.82720000000000005, 0.81620000000000004, 0.85199999999999998, 0.85819999999999996, 0.876, 0.87819999999999998, 0.89100000000000001, 0.89880000000000004, 0.874, 0.85399999999999998, 0.85719999999999996, 0.8518, 0.84819999999999995, 0.83499999999999996, 0.8206, 0.80500000000000005, 0.78900000000000003, 0.77400000000000002, 0.75880000000000003, 0.753, 0.75580000000000003, 0.75080000000000002, 0.73280000000000001, 0.71079999999999999, 0.69040000000000001, 0.65900000000000003, 0.66139999999999999, 0.67700000000000005, 0.70620000000000005, 0.74180000000000001, 0.79459999999999997, 0.878, 0.98299999999999998, 1.0628, 1.1044, 1.0998000000000001, 1.0371999999999999, 0.92179999999999995, 0.85260000000000002, 0.80100000000000005, 0.75239999999999996, 0.70079999999999998, 0.66920000000000002, 0.65180000000000005, 0.64159999999999995, 0.63300000000000001, 0.62760000000000005, 0.62780000000000002, 0.64059999999999995, 0.66620000000000001, 0.6784, 0.68300000000000005, 0.67479999999999996, 0.6804, 0.755, 0.7802, 0.80659999999999998, 0.82120000000000004, 0.83640000000000003, 0.85660000000000003, 0.90500000000000003, 0.90880000000000005, 0.88019999999999998, 0.86419999999999997, 0.84719999999999995, 0.82740000000000002, 0.80020000000000002, 0.75800000000000001, 0.69979999999999998, 0.71360000000000001, 0.90400000000000003, 0.9768, 1.123, 1.2014, 0.93259999999999998, 0.81240000000000001, 0.71319999999999995, 0.65780000000000005, 0.65639999999999998, 0.6472, 0.62829999999999997, 0.63440000000000007, 0.6885, 0.76059999999999994, 0.83579999999999999, 0.93270000000000008, 1.0291000000000001, 1.0882000000000001, 1.0954000000000002, 1.0880999999999998, 1.0526, 0.98049999999999993, 0.86430000000000007, 0.8085, 0.41639999999999999, 0.29980000000000001, 0.24840000000000001, 0.1825, 0.13319999999999999, 0.091359999999999997, 0.065560000000000007, 0.048509999999999998, 0.039219999999999998, 0.030629999999999998, 0.02239, 0.016642000000000001, 0.015498000000000001, 0.01456, 0.013663, 0.012806999999999999, 0.011991, 0.011218000000000001, 0.010484, 0.009777000000000001, 0.0090940000000000014, 0.0084370000000000001, 0.0079260000000000008, 0.0081139999999999997, 0.0071549999999999999, 0.0062389999999999998, 0.0053679999999999995, 0.0045409999999999999, 0.0037580000000000001, 0.003019, 0.00232, 0.0016800999999999999, 0.0011435, 0.00070980000000000001, 0.0003791, 0.00015118999999999999, 2.6239999999999999e-05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                          list(map(lambda x: x.value, dos.scalars)))
        self.assertEquals('number of states per unit cell', dos.units)
        
        
    def test_SOC(self):
        # Parse the results
        parser = self.get_parser('heusler_static_SOC')
        
        # Test the settings
        self.assertEquals('VASP', parser.get_name())
        
        res = parser.get_cutoff_energy()
        self.assertEquals(499, res.scalars[0].value)
        self.assertEquals('eV', res.units)

        # Make sure it gets the last ionic step
        strc = parser.get_output_structure()
        self.assertAlmostEquals(3.3681598291240786, strc.cell[1][0])
        self.assertEquals(['Li','Pt','Sn','Y'], strc.get_chemical_symbols())
        self.assertEquals('LiPtSnY', parser.get_composition())
        
        self.assertTrue(parser.is_converged())
        
        self.assertAlmostEqual(-22.273992, parser.get_total_energy().scalars[0].value)
        self.assertTrue(isinstance(parser.uses_SOC(), Value))
        self.assertEquals(None, parser.is_relaxed())
        self.assertEquals('PAW_PBE', parser.get_xc_functional().scalars[0].value)
        self.assertEquals(['Li_sv','Pt','Sn_d','Y_sv'], list(map(lambda x: x.value, parser.get_pp_name().scalars)))
        self.assertEquals(1440, parser.get_KPPRA().scalars[0].value)
        self.assertEquals('5.2.11', parser.get_version_number())
        self.assertEquals(None, parser.get_U_settings())
        self.assertEquals(None, parser.get_vdW_settings())
        self.assertEquals(None, parser.get_pressure())
        self.assertEquals(None, parser.get_stresses())
        self.assertEquals(0.757, parser.get_band_gap().scalars[0].value)

        dos = parser.get_dos()
        self.assertEquals([-42.363, -42.173000000000002, -41.984000000000002, -41.795000000000002, -41.604999999999997, -41.415999999999997, -41.226999999999997, -41.036999999999999, -40.847999999999999, -40.658000000000001, -40.469000000000001, -40.280000000000001, -40.090000000000003, -39.901000000000003, -39.710999999999999, -39.521999999999998, -39.332999999999998, -39.143000000000001, -38.954000000000001, -38.764000000000003, -38.575000000000003, -38.386000000000003, -38.195999999999998, -38.006999999999998, -37.817, -37.628, -37.439, -37.249000000000002, -37.060000000000002, -36.871000000000002, -36.680999999999997, -36.491999999999997, -36.302, -36.113, -35.923999999999999, -35.734000000000002, -35.545000000000002, -35.354999999999997, -35.165999999999997, -34.976999999999997, -34.786999999999999, -34.597999999999999, -34.408000000000001, -34.219000000000001, -34.030000000000001, -33.840000000000003, -33.651000000000003, -33.462000000000003, -33.271999999999998, -33.082999999999998, -32.893000000000001, -32.704000000000001, -32.515000000000001, -32.325000000000003, -32.136000000000003, -31.946000000000002, -31.757000000000001, -31.568000000000001, -31.378, -31.189, -30.998999999999999, -30.809999999999999, -30.620999999999999, -30.431000000000001, -30.242000000000001, -30.053000000000001, -29.863, -29.673999999999999, -29.484000000000002, -29.295000000000002, -29.106000000000002, -28.916, -28.727, -28.536999999999999, -28.347999999999999, -28.158999999999999, -27.969000000000001, -27.780000000000001, -27.59, -27.401, -27.212, -27.021999999999998, -26.832999999999998, -26.643999999999998, -26.454000000000001, -26.265000000000001, -26.074999999999999, -25.885999999999999, -25.696999999999999, -25.507000000000001, -25.318000000000001, -25.128, -24.939, -24.75, -24.559999999999999, -24.370999999999999, -24.181000000000001, -23.992000000000001, -23.803000000000001, -23.613, -23.423999999999999, -23.234999999999999, -23.045000000000002, -22.856000000000002, -22.666, -22.477, -22.288, -22.097999999999999, -21.908999999999999, -21.719000000000001, -21.530000000000001, -21.341000000000001, -21.151, -20.962, -20.771999999999998, -20.582999999999998, -20.393999999999998, -20.204000000000001, -20.015000000000001, -19.824999999999999, -19.635999999999999, -19.446999999999999, -19.257000000000001, -19.068000000000001, -18.879000000000001, -18.689, -18.5, -18.309999999999999, -18.120999999999999, -17.931999999999999, -17.742000000000001, -17.553000000000001, -17.363, -17.173999999999999, -16.984999999999999, -16.795000000000002, -16.606000000000002, -16.416, -16.227, -16.038, -15.848000000000001, -15.659000000000001, -15.470000000000001, -15.279999999999999, -15.090999999999999, -14.901, -14.712, -14.523, -14.333, -14.144, -13.954000000000001, -13.765000000000001, -13.576000000000001, -13.385999999999999, -13.196999999999999, -13.007, -12.818, -12.629, -12.439, -12.25, -12.061, -11.871, -11.682, -11.492000000000001, -11.303000000000001, -11.114000000000001, -10.923999999999999, -10.734999999999999, -10.545, -10.356, -10.167, -9.9770000000000003, -9.7880000000000003, -9.5980000000000008, -9.4090000000000007, -9.2200000000000006, -9.0299999999999994, -8.8409999999999993, -8.6519999999999992, -8.4619999999999997, -8.2729999999999997, -8.0830000000000002, -7.8940000000000001, -7.7050000000000001, -7.5149999999999997, -7.3259999999999996, -7.1360000000000001, -6.9470000000000001, -6.758, -6.5679999999999996, -6.3789999999999996, -6.1890000000000001, -6.0, -5.8109999999999999, -5.6210000000000004, -5.4320000000000004, -5.2430000000000003, -5.0529999999999999, -4.8639999999999999, -4.6740000000000004, -4.4850000000000003, -4.2960000000000003, -4.1059999999999999, -3.9169999999999998, -3.7269999999999999, -3.5379999999999998, -3.3490000000000002, -3.1589999999999998, -2.9700000000000002, -2.7799999999999998, -2.5910000000000002, -2.4020000000000001, -2.2120000000000002, -2.0230000000000001, -1.833, -1.6439999999999999, -1.4550000000000001, -1.2649999999999999, -1.0760000000000001, -0.88700000000000001, -0.69699999999999995, -0.50800000000000001, -0.318, -0.129, 0.059999999999999998, 0.25, 0.439, 0.629, 0.81799999999999995, 1.0069999999999999, 1.1970000000000001, 1.3859999999999999, 1.5760000000000001, 1.7649999999999999, 1.954, 2.1440000000000001, 2.3330000000000002, 2.5219999999999998, 2.7120000000000002, 2.9009999999999998, 3.0910000000000002, 3.2799999999999998, 3.4689999999999999, 3.6589999999999998, 3.8479999999999999, 4.0380000000000003, 4.2270000000000003, 4.4160000000000004, 4.6059999999999999, 4.7949999999999999, 4.9850000000000003, 5.1740000000000004, 5.3630000000000004, 5.5529999999999999, 5.742, 5.931, 6.1210000000000004, 6.3099999999999996, 6.5, 6.6890000000000001, 6.8780000000000001, 7.0679999999999996, 7.2569999999999997, 7.4470000000000001, 7.6360000000000001, 7.8250000000000002, 8.0150000000000006, 8.2040000000000006, 8.3940000000000001, 8.5830000000000002, 8.7720000000000002, 8.9619999999999997, 9.1509999999999998, 9.3399999999999999, 9.5299999999999994, 9.7189999999999994, 9.9090000000000007, 10.098000000000001, 10.287000000000001, 10.477, 10.666, 10.856, 11.045, 11.234, 11.423999999999999, 11.613, 11.803000000000001, 11.992000000000001, 12.180999999999999, 12.371, 12.56, 12.749000000000001, 12.939, 13.128, 13.318, 13.507, 13.696, 13.885999999999999, 14.074999999999999, 14.265000000000001, 14.454000000000001],
                          list(map(lambda x: x.value, dos.conditions.scalars)))
        self.assertEqualse-13, 0.99199999999999999, 0.37909999999999999, 1.0660000000000001, 2.2519999999999998, 1.728, 2.125, 1.841, 1.766, 2.1459999999999999, 4.468, 6.1970000000000001, 6.0819999999999999, 2.77, 1.9319999999999999, 1.4470000000000001, 4.2309999999999999, 2.5150000000000001, 0.52410000000000001, 0.2462, 0.20069999999999999, 0.12670000000000001, 0.091480000000000006, 0.05867, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                          list(map(lambda x: x.value, dos.scalars)))


        positions = parser.get_positions()
        xyz = list(map(lambda x: list(map(lambda y: y.value, x)), positions.vectors))
        self.assertEqual([[5.05224, 5.05224, 5.05224],
                          [1.68408, 1.68408, 1.68408],
                          [3.36817, 3.36817, 3.36817],
                          [0.0, 0.0, 0.0]],
                         xyz)

        forces = parser.get_forces()
        for f in forces.vectors:
            for x in f:
                self.assertAlmostEqual(0.0, x.value)

        # Delete the data
        delete_example('heusler_static_SOC')
        
    def test_vdW(self):
        # Parse the results
        parser = self.get_parser('vdW')
        
        # Test the settings
        self.assertEquals('VASP', parser.get_name())
        strc = parser.get_output_structure()
        self.assertAlmostEquals(-12.6699720530641162, strc.cell[1][0])
        self.assertEquals(['C']*48, strc.get_chemical_symbols()[:48])
        self.assertEquals('Br16C48Fe6H48N12S12', parser.get_composition())
        
        res = parser.get_cutoff_energy()
        self.assertEquals(520, res.scalars[0].value)
        self.assertEquals('eV', res.units)
        
        self.assertTrue(parser.is_converged().scalars[0].value)
        self.assertAlmostEqual(-707.48169596, parser.get_total_energy().scalars[0].value)
        self.assertEquals(None, parser.uses_SOC())
        self.assertTrue(isinstance(parser.is_relaxed(), Value))
        self.assertEquals('PAW_PBE', parser.get_xc_functional().scalars[0].value)
        self.assertEquals(['C','H','Br','Fe','N','S'], list(map(lambda x: x.value, parser.get_pp_name().scalars)))
        self.assertEquals(142, parser.get_KPPRA().scalars[0].value)
        self.assertEquals('5.3.5', parser.get_version_number())
        self.assertEquals(None, parser.get_U_settings())
        self.assertEquals('optB88-vdW', parser.get_vdW_settings().scalars[0].value)
        self.assertEquals(-0.07, parser.get_pressure().scalars[0].value)
        self.assertEquals([[-4.09956,0,0],[0,-4.09956,0],[0,0,-4.00192]],
                          list(map(lambda x: list(map(lambda y: y.value, x)), parser.get_stresses().matrices[0])))
        self.assertEquals(0, parser.get_band_gap().scalars[0].value)

        dos = parser.get_dos()
        self.assertEquals([-22.135000000000002, -22.029, -21.923999999999999, -21.818999999999999, -21.713000000000001, -21.608000000000001, -21.501999999999999, -21.396999999999998, -21.291, -21.186, -21.079999999999998, -20.975000000000001, -20.869, -20.763999999999999, -20.658000000000001, -20.553000000000001, -20.448, -20.341999999999999, -20.236999999999998, -20.131, -20.026, -19.920000000000002, -19.815000000000001, -19.709, -19.603999999999999, -19.498000000000001, -19.393000000000001, -19.288, -19.181999999999999, -19.077000000000002, -18.971, -18.866, -18.760000000000002, -18.655000000000001, -18.548999999999999, -18.443999999999999, -18.338000000000001, -18.233000000000001, -18.128, -18.021999999999998, -17.917000000000002, -17.811, -17.706, -17.600000000000001, -17.495000000000001, -17.388999999999999, -17.283999999999999, -17.178000000000001, -17.073, -16.966999999999999, -16.861999999999998, -16.757000000000001, -16.651, -16.545999999999999, -16.440000000000001, -16.335000000000001, -16.228999999999999, -16.123999999999999, -16.018000000000001, -15.913, -15.807, -15.702, -15.597, -15.491, -15.385999999999999, -15.279999999999999, -15.175000000000001, -15.069000000000001, -14.964, -14.858000000000001, -14.753, -14.647, -14.542, -14.436, -14.331, -14.226000000000001, -14.119999999999999, -14.015000000000001, -13.909000000000001, -13.804, -13.698, -13.593, -13.487, -13.382, -13.276, -13.170999999999999, -13.066000000000001, -12.960000000000001, -12.855, -12.749000000000001, -12.644, -12.538, -12.433, -12.327, -12.222, -12.116, -12.010999999999999, -11.906000000000001, -11.800000000000001, -11.695, -11.589, -11.484, -11.378, -11.273, -11.167, -11.061999999999999, -10.956, -10.851000000000001, -10.744999999999999, -10.640000000000001, -10.535, -10.429, -10.324, -10.218, -10.113, -10.007, -9.9019999999999992, -9.7959999999999994, -9.6910000000000007, -9.5850000000000009, -9.4800000000000004, -9.375, -9.2690000000000001, -9.1639999999999997, -9.0579999999999998, -8.9529999999999994, -8.8469999999999995, -8.7420000000000009, -8.6359999999999992, -8.5310000000000006, -8.4250000000000007, -8.3200000000000003, -8.2149999999999999, -8.109, -8.0039999999999996, -7.8979999999999997, -7.7930000000000001, -7.6870000000000003, -7.5819999999999999, -7.476, -7.3710000000000004, -7.2649999999999997, -7.1600000000000001, -7.0540000000000003, -6.9489999999999998, -6.8440000000000003, -6.7380000000000004, -6.633, -6.5270000000000001, -6.4219999999999997, -6.3159999999999998, -6.2110000000000003, -6.1050000000000004, -6.0, -5.8940000000000001, -5.7889999999999997, -5.6840000000000002, -5.5780000000000003, -5.4729999999999999, -5.367, -5.2619999999999996, -5.1559999999999997, -5.0510000000000002, -4.9450000000000003, -4.8399999999999999, -4.734, -4.6289999999999996, -4.5229999999999997, -4.4180000000000001, -4.3129999999999997, -4.2069999999999999, -4.1020000000000003, -3.996, -3.891, -3.7850000000000001, -3.6800000000000002, -3.5739999999999998, -3.4689999999999999, -3.363, -3.258, -3.153, -3.0470000000000002, -2.9420000000000002, -2.8359999999999999, -2.7309999999999999, -2.625, -2.52, -2.4140000000000001, -2.3090000000000002, -2.2029999999999998, -2.0979999999999999, -1.9930000000000001, -1.887, -1.782, -1.6759999999999999, -1.571, -1.4650000000000001, -1.3600000000000001, -1.254, -1.149, -1.0429999999999999, -0.93799999999999994, -0.83199999999999996, -0.72699999999999998, -0.622, -0.51600000000000001, -0.41099999999999998, -0.30499999999999999, -0.20000000000000001, -0.094, 0.010999999999999999, 0.11700000000000001, 0.222, 0.32800000000000001, 0.433, 0.53800000000000003, 0.64400000000000002, 0.749, 0.85499999999999998, 0.95999999999999996, 1.0660000000000001, 1.171, 1.2769999999999999, 1.3819999999999999, 1.488, 1.593, 1.698, 1.804, 1.909, 2.0150000000000001, 2.1200000000000001, 2.226, 2.331, 2.4369999999999998, 2.5419999999999998, 2.6480000000000001, 2.7530000000000001, 2.859, 2.964, 3.069, 3.1749999999999998, 3.2799999999999998, 3.3860000000000001, 3.4910000000000001, 3.597, 3.702, 3.8079999999999998, 3.9129999999999998, 4.0190000000000001, 4.1239999999999997, 4.2290000000000001, 4.335, 4.4400000000000004, 4.5460000000000003, 4.6509999999999998, 4.7569999999999997, 4.8620000000000001, 4.968, 5.0730000000000004, 5.1790000000000003, 5.2839999999999998, 5.3890000000000002, 5.4950000000000001, 5.5999999999999996, 5.7060000000000004, 5.8109999999999999, 5.9169999999999998, 6.0220000000000002, 6.1280000000000001, 6.2329999999999997, 6.3390000000000004, 6.444, 6.5499999999999998, 6.6550000000000002, 6.7599999999999998, 6.8659999999999997, 6.9710000000000001, 7.077, 7.1820000000000004, 7.2880000000000003, 7.3929999999999998, 7.4989999999999997, 7.6040000000000001, 7.71, 7.8150000000000004, 7.9199999999999999, 8.0259999999999998, 8.1310000000000002, 8.2370000000000001, 8.3420000000000005, 8.4480000000000004, 8.5530000000000008, 8.6590000000000007, 8.7639999999999993, 8.8699999999999992, 8.9749999999999996, 9.0809999999999995, 9.1859999999999999, 9.2910000000000004, 9.3970000000000002, 9.5020000000000007],
                          list(map(lambda x: x.value, dos.conditions.scalars)))
        self.assertEquals([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.6319999999999999e-17, 3.143e-15, 2.6169999999999999e-13, 1.5350000000000001e-11, 6.3450000000000003e-10, 1.85e-08, 3.8080000000000002e-07, 5.5450000000000003e-06, 5.7269999999999999e-05, 0.0004215, 0.0022279999999999999, 0.0085550000000000001, 0.024320000000000001, 0.052359999999999997, 0.087309999999999999, 0.1142, 0.1181, 0.1023, 0.091939999999999994, 0.107, 0.13159999999999999, 0.13059999999999999, 0.094570000000000001, 0.048860000000000001, 0.017909999999999999, 0.004653, 0.00085590000000000004, 0.0001114, 1.025e-05, 6.6710000000000004e-07, 3.0659999999999998e-08, 9.944e-10, 2.2749999999999999e-11, 3.6710000000000002e-13, 4.211e-15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.6849999999999997e-17, 4.5060000000000002e-15, 3.6630000000000001e-13, 2.1149999999999999e-11, 8.6729999999999999e-10, 2.531e-08, 5.2679999999999998e-07, 7.8390000000000007e-06, 8.3570000000000001e-05, 0.00063960000000000004, 0.0035209999999999998, 0.01397, 0.040129999999999999, 0.084239999999999995, 0.13339999999999999, 0.17269999999999999, 0.20960000000000001, 0.25469999999999998, 0.28050000000000003, 0.24560000000000001, 0.15970000000000001, 0.075359999999999996, 0.026380000000000001, 0.011169999999999999, 0.020629999999999999, 0.056489999999999999, 0.1211, 0.19800000000000001, 0.2586, 0.29349999999999998, 0.31209999999999999, 0.3054, 0.25030000000000002, 0.1585, 0.075039999999999996, 0.02937, 0.020729999999999998, 0.03882, 0.073150000000000007, 0.1066, 0.1186, 0.1008, 0.065310000000000007, 0.031879999999999999, 0.011610000000000001, 0.0034150000000000001, 0.002552, 0.0084089999999999998, 0.025819999999999999, 0.058729999999999997, 0.098680000000000004, 0.1231, 0.11409999999999999, 0.078479999999999994, 0.040129999999999999, 0.016910000000000001, 0.01357, 0.031550000000000002, 0.070419999999999996, 0.1143, 0.13220000000000001, 0.1089, 0.063869999999999996, 0.026679999999999999, 0.0079389999999999999, 0.0016819999999999999, 0.00025619999999999999, 5.9740000000000001e-05, 0.00028899999999999998, 0.0018500000000000001, 0.0087819999999999999, 0.03082, 0.080199999999999994, 0.1552, 0.22389999999999999, 0.24160000000000001, 0.1958, 0.1208, 0.061920000000000003, 0.043180000000000003, 0.065579999999999999, 0.11210000000000001, 0.15129999999999999, 0.15820000000000001, 0.13919999999999999, 0.1203, 0.11260000000000001, 0.1028, 0.078009999999999996, 0.044979999999999999, 0.019029999999999998, 0.0059649999999999998, 0.0023180000000000002, 0.0052659999999999998, 0.018010000000000002, 0.047750000000000001, 0.097589999999999996, 0.1588, 0.20999999999999999, 0.22620000000000001, 0.19950000000000001, 0.15759999999999999, 0.14380000000000001, 0.17199999999999999, 0.21440000000000001, 0.23350000000000001, 0.21890000000000001, 0.19220000000000001, 0.18229999999999999, 0.1951, 0.2117, 0.21820000000000001, 0.219, 0.2167, 0.21029999999999999, 0.2117, 0.23849999999999999, 0.29120000000000001, 0.34539999999999998, 0.36799999999999999, 0.35039999999999999, 0.31669999999999998, 0.29139999999999999, 0.2722, 0.24679999999999999, 0.22059999999999999, 0.2094, 0.21229999999999999, 0.21179999999999999, 0.20000000000000001, 0.18690000000000001, 0.18140000000000001, 0.18840000000000001, 0.21740000000000001, 0.26579999999999998, 0.31019999999999998, 0.33589999999999998, 0.35599999999999998, 0.38740000000000002, 0.42420000000000002, 0.44290000000000002, 0.42880000000000001, 0.3901, 0.34289999999999998, 0.29120000000000001, 0.23169999999999999, 0.1731, 0.13800000000000001, 0.14460000000000001, 0.18640000000000001, 0.2293, 0.2344, 0.19320000000000001, 0.13400000000000001, 0.095130000000000006, 0.091319999999999998, 0.1056, 0.1113, 0.097659999999999997, 0.070879999999999999, 0.042029999999999998, 0.020400000000000001, 0.01214, 0.024029999999999999, 0.068360000000000004, 0.15179999999999999, 0.24809999999999999, 0.29959999999999998, 0.27460000000000001, 0.21390000000000001, 0.18720000000000001, 0.2112, 0.23899999999999999, 0.22289999999999999, 0.16350000000000001, 0.094339999999999993, 0.042779999999999999, 0.01506, 0.004032, 0.00080500000000000005, 0.00013300000000000001, 0.00013970000000000001, 0.00073349999999999999, 0.003088, 0.0099260000000000008, 0.025839999999999998, 0.057540000000000001, 0.11, 0.1724, 0.2135, 0.21379999999999999, 0.1966, 0.19850000000000001, 0.22040000000000001, 0.22919999999999999, 0.1983, 0.1343, 0.070239999999999997, 0.03288, 0.027310000000000001, 0.047260000000000003, 0.086449999999999999, 0.13769999999999999, 0.18809999999999999, 0.2185, 0.2104, 0.1613, 0.095079999999999998, 0.042020000000000002, 0.014149999999999999, 0.005764, 0.0096120000000000008, 0.023990000000000001, 0.048349999999999997, 0.080140000000000003, 0.1201, 0.1731, 0.2354, 0.28839999999999999, 0.31030000000000002, 0.29310000000000003, 0.25169999999999998, 0.21129999999999999, 0.17999999999999999, 0.1449, 0.099610000000000004, 0.054780000000000002, 0.02332, 0.0075259999999999997, 0.0018090000000000001, 0.0003191, 4.0849999999999997e-05, 3.7639999999999999e-06, 2.481e-07, 1.165e-08, 3.8859999999999998e-10, 9.1830000000000008e-12, 1.535e-13, 1.811e-15, 2.106e-17, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                          list(map(lambda x: x.value, dos.scalars)))


        # Delete the data
        delete_example('vdW')
        
if __name__ == '__main__':
    unittest.main()
